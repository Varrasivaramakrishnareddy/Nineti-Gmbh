#include <stdio.h>
#include <string.h>
#include "esp_wifi.h"
#include "esp_log.h"
#include "nvs_flash.h"
#include "esp_event.h"
#include "wifi_provisioning/manager.h"
#include "wifi_provisioning/scheme_ble.h" // Use scheme_softap.h for SoftAP provisioning
#include "esp_system.h"

static const char *TAG = "WiFi_Setup";

// Proof of Possession (POP) and Service Identifier
const char *pop_code = "abcd1234";
const char *service_identifier = "PROV_123";

// Event handler for managing Wi-Fi provisioning events
void wifi_event_handler(void* arg, esp_event_base_t event_base, int32_t event_id, void* event_data) {
    if (event_base == WIFI_PROV_EVENT) {
        switch (event_id) {
            case WIFI_PROV_START:
                ESP_LOGI(TAG, "Provisioning process has begun");
                break;
            case WIFI_PROV_CRED_RECV: {
                wifi_prov_sta_conn_info_t *wifi_credentials = (wifi_prov_sta_conn_info_t *)event_data;
                ESP_LOGI(TAG, "Received Wi-Fi credentials:\n\tSSID: %s\n\tPassword: %s",
                         (const char *)wifi_credentials->ssid,
                         (const char *)wifi_credentials->password);
                break;
            }
            case WIFI_PROV_CRED_FAIL: {
                wifi_prov_sta_fail_reason_t *fail_reason = (wifi_prov_sta_fail_reason_t *)event_data;
                if (*fail_reason == WIFI_PROV_STA_AUTH_ERROR) {
                    ESP_LOGE(TAG, "Authentication failure during Wi-Fi connection");
                } else {
                    ESP_LOGE(TAG, "Access Point not detected");
                }
                break;
            }
            case WIFI_PROV_CRED_SUCCESS:
                ESP_LOGI(TAG, "Provisioning completed successfully");
                break;
            case WIFI_PROV_END:
                ESP_LOGI(TAG, "Provisioning process has ended");
                wifi_prov_mgr_deinit(); // Terminate provisioning manager
                break;
        }
    }
    else if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_DISCONNECTED) {
        ESP_LOGI(TAG, "Wi-Fi disconnected, attempting reconnection...");
        esp_wifi_connect();
    }
    else if (event_base == IP_EVENT && event_id == IP_EVENT_STA_GOT_IP) {
        ip_event_got_ip_t* event = (ip_event_got_ip_t*) event_data;
        ESP_LOGI(TAG, "Successfully obtained IP address: " IPSTR, IP2STR(&event->ip_info.ip));
    }
}

void initiate_wifi_provisioning() {
    // Initialize NVS for storing Wi-Fi credentials
    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
        nvs_flash_erase();
        nvs_flash_init();
    }

    // Initialize TCP/IP stack and Wi-Fi subsystem
    esp_netif_init();
    esp_event_loop_create_default();
    esp_netif_create_default_wifi_sta();
    wifi_init_config_t wifi_cfg = WIFI_INIT_CONFIG_DEFAULT();
    esp_wifi_init(&wifi_cfg);

    // Register event handlers for Wi-Fi, IP, and provisioning events
    esp_event_handler_register(WIFI_EVENT, ESP_EVENT_ANY_ID, &wifi_event_handler, NULL);
    esp_event_handler_register(IP_EVENT, IP_EVENT_STA_GOT_IP, &wifi_event_handler, NULL);
    esp_event_handler_register(WIFI_PROV_EVENT, ESP_EVENT_ANY_ID, &wifi_event_handler, NULL);

    // Configure provisioning
    wifi_prov_mgr_config_t provisioning_config = {
        .scheme = wifi_prov_scheme_ble,  // Switch to wifi_prov_scheme_softap for SoftAP provisioning
        .scheme_event_handler = WIFI_PROV_SCHEME_BLE_EVENT_HANDLER_FREE_BTDM
    };

    wifi_prov_mgr_init(provisioning_config);

    bool is_provisioned = false;
    wifi_prov_mgr_is_provisioned(&is_provisioned);

    if (!is_provisioned) {
        ESP_LOGI(TAG, "Provisioning started");

        // Start Wi-Fi provisioning with the POP and service name
        wifi_prov_security_t security_level = WIFI_PROV_SECURITY_1;
        wifi_prov_mgr_start_provisioning(security_level, pop_code, service_identifier, NULL);
        
        // Output QR code for mobile app connection
        wifi_prov_print_qr(service_identifier, pop_code, "ble");
    } else {
        ESP_LOGI(TAG, "Device already provisioned, connecting to the network");
        esp_wifi_set_mode(WIFI_MODE_STA);
        esp_wifi_start();
    }
}

void app_main(void) {
    initiate_wifi_provisioning();
}